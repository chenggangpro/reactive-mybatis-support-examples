package pro.chenggang.example.reactive.mybatis.r2dbc.spring.mapper;

import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.SelectKey;
import org.mybatis.dynamic.sql.insert.render.InsertStatementProvider;
import org.mybatis.dynamic.sql.util.SqlProviderAdapter;
import pro.chenggang.example.reactive.mybatis.r2dbc.spring.entity.extend.DeptWithEmp;
import pro.chenggang.example.reactive.mybatis.r2dbc.spring.entity.model.Dept;
import pro.chenggang.example.reactive.mybatis.r2dbc.spring.mapper.dynamic.DeptDynamicMapper;
import pro.chenggang.example.reactive.mybatis.r2dbc.spring.mapper.dynamic.DeptDynamicSqlSupport;
import pro.chenggang.project.reactive.mybatis.support.r2dbc.dynamic.ReactiveMyBatis3Utils;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.time.LocalDateTime;

import static org.mybatis.dynamic.sql.SqlBuilder.isEqualTo;
import static pro.chenggang.example.reactive.mybatis.r2dbc.spring.mapper.dynamic.DeptDynamicSqlSupport.createTime;
import static pro.chenggang.example.reactive.mybatis.r2dbc.spring.mapper.dynamic.DeptDynamicSqlSupport.dept;
import static pro.chenggang.example.reactive.mybatis.r2dbc.spring.mapper.dynamic.DeptDynamicSqlSupport.deptName;
import static pro.chenggang.example.reactive.mybatis.r2dbc.spring.mapper.dynamic.DeptDynamicSqlSupport.deptNo;
import static pro.chenggang.example.reactive.mybatis.r2dbc.spring.mapper.dynamic.DeptDynamicSqlSupport.location;

/**
 * auto generated
 * @author AutoGenerated
 */
@Mapper
public interface DeptMapper extends DeptDynamicMapper {

    default Mono<Long> count(){
        return count(dsl -> dsl);
    }

    default Flux<Dept> selectAll(){
        return select(dsl -> dsl);
    }

    default Mono<Dept> selectOneByDeptNo(Integer deptNo){
        return selectOne(dsl -> dsl
                .where(DeptDynamicSqlSupport.deptNo,isEqualTo(deptNo))
        );
    }

    default Flux<Dept> selectListByTime(LocalDateTime createTime){
        return select(dsl -> dsl
                .where(DeptDynamicSqlSupport.createTime,isEqualTo(createTime))
        );
    }

    default Mono<Integer> deleteByDeptNo(Integer deptNo){
        return delete(dsl -> dsl
                .where(DeptDynamicSqlSupport.deptNo,isEqualTo(deptNo))
        );
    }

    default Mono<Integer> updateByDeptNo(Dept dept){
        return updateAllByPrimaryKey(dept);
    }

    Flux<DeptWithEmp> selectDeptWithEmpList();

    @InsertProvider(type= SqlProviderAdapter.class, method="insert")
    @SelectKey(before = false, keyProperty = "record.deptNo", statement = "SELECT currval('dept_dept_no_seq')" ,resultType = Integer.class)
    Mono<Integer> insertSelectiveWithSelectKey(InsertStatementProvider<Dept> insertStatement);

    default Mono<Integer> insertSelectiveWithSelectKey(Dept record) {
        return ReactiveMyBatis3Utils.insert(this::insertSelectiveWithSelectKey, record, dept, c ->
                c.map(deptNo).toPropertyWhenPresent("deptNo", record::getDeptNo)
                        .map(deptName).toPropertyWhenPresent("deptName", record::getDeptName)
                        .map(location).toPropertyWhenPresent("location", record::getLocation)
                        .map(createTime).toPropertyWhenPresent("createTime", record::getCreateTime)
        );
    }

}